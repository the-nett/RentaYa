// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RentaloYa.Infrastructure.Data;

#nullable disable

namespace RentaloYa.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250527212637_InitialPostgreSQLMigration")]
    partial class InitialPostgreSQLMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "El artículo está visible y se puede alquilar",
                            StatusName = "Disponible"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Todos los ejemplares están ocupados en este momento",
                            StatusName = "Rentado"
                        },
                        new
                        {
                            Id = 3,
                            Description = "El dueño pausó la publicación (invisible)",
                            StatusName = "Pausado"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Eliminado lógicamente del sistema",
                            StatusName = "Eliminado"
                        });
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Herramientas"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Electrónicos"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deportes"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hogar"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Jardín"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Eventos"
                        });
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("IdGender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGender"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdGender");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            IdGender = 1,
                            GenderName = "Masculino"
                        },
                        new
                        {
                            IdGender = 2,
                            GenderName = "Femenino"
                        },
                        new
                        {
                            IdGender = 3,
                            GenderName = "Otro"
                        });
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("ItemStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("integer");

                    b.Property<int>("RentalTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ItemStatusId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RentalTypeId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.ItemTag", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.Property<float>("Confidence")
                        .HasColumnType("real");

                    b.HasKey("ItemId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ItemTags", (string)null);
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Permissionn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            Permissionn = "Crear Usuario"
                        },
                        new
                        {
                            PermissionId = 2,
                            Permissionn = "Eliminar Farmacia"
                        },
                        new
                        {
                            PermissionId = 3,
                            Permissionn = "Ver Reportes"
                        });
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PostId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PostId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.RentalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RentalTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Por hora"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Por día"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "Por semana"
                        },
                        new
                        {
                            Id = 4,
                            TypeName = "Por mes"
                        });
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Rol = "Administrador"
                        },
                        new
                        {
                            RoleId = 2,
                            Rol = "Invitado"
                        },
                        new
                        {
                            RoleId = 3,
                            Rol = "Cliente"
                        });
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolesPermissions");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 3
                        });
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TagId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender_Id")
                        .HasColumnType("integer");

                    b.Property<Guid?>("IdSupa")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsernameProsody")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Gender_Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateOnly(2002, 7, 7),
                            CreatedAt = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "felipe@gmail.com",
                            FullName = "Felipe Segura",
                            Gender_Id = 1,
                            IdSupa = new Guid("d290f1ee-6c54-4b01-90e6-d701748f0851"),
                            IsActive = true,
                            Username = "FelipSeg",
                            UsernameProsody = "testuser2@localhost"
                        });
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.UserRol", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Item", b =>
                {
                    b.HasOne("RentaloYa.Domain.Entities.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItemStatus", "ItemStatus")
                        .WithMany("Items")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaloYa.Domain.Entities.User", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaloYa.Domain.Entities.RentalType", "RentalType")
                        .WithMany("Items")
                        .HasForeignKey("RentalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ItemStatus");

                    b.Navigation("Owner");

                    b.Navigation("RentalType");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.ItemTag", b =>
                {
                    b.HasOne("RentaloYa.Domain.Entities.Item", "Item")
                        .WithMany("ItemTags")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaloYa.Domain.Entities.Tag", "Tag")
                        .WithMany("ItemTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Post", b =>
                {
                    b.HasOne("RentaloYa.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaloYa.Domain.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("RentaloYa.Domain.Entities.Permission", "Permission")
                        .WithMany("RolesPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaloYa.Domain.Entities.Role", "Role")
                        .WithMany("RolesPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.User", b =>
                {
                    b.HasOne("RentaloYa.Domain.Entities.Gender", "Gender")
                        .WithMany("users")
                        .HasForeignKey("Gender_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.UserRol", b =>
                {
                    b.HasOne("RentaloYa.Domain.Entities.Role", "Role")
                        .WithMany("UsersRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaloYa.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ItemStatus", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Gender", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Item", b =>
                {
                    b.Navigation("ItemTags");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolesPermissions");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.RentalType", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolesPermissions");

                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.Tag", b =>
                {
                    b.Navigation("ItemTags");
                });

            modelBuilder.Entity("RentaloYa.Domain.Entities.User", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Posts");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
