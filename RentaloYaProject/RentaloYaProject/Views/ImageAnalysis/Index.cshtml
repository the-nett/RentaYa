@{
    ViewData["Title"] = "Probar Análisis de Imagen con Gemini";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Probar Análisis de Imagen</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
        }

        textarea {
            width: 100%;
            height: 300px;
            margin-top: 10px;
            border: 1px solid #ccc;
            padding: 10px;
        }

        #uploadedImage {
            max-width: 300px;
            margin-top: 20px;
            border: 1px solid #ccc;
            display: none; /* Oculto por defecto */
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: #f9f9f9;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        h1, h2 {
            color: #333;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        button {
            background-color: #007bff;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

            button:hover {
                background-color: #0056b3;
            }

        input[type="file"] {
            padding: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Análisis de Imagen con Gemini</h1>
        <form id="imageForm">
            <label for="imageInput">Selecciona una imagen:</label>
            <input type="file" id="imageInput" name="image" accept="image/*" required />
            <br><br>
            <button type="submit">Analizar Imagen</button>
        </form>

        <h2>Vista Previa de la Imagen</h2>
        <img id="uploadedImage" src="#" alt="Imagen subida">

        <h2>Respuesta del Análisis (JSON)</h2>
        <textarea id="jsonOutput" readonly></textarea>
    </div>

    <script>
        const imageForm = document.getElementById('imageForm');
        const imageInput = document.getElementById('imageInput');
        const uploadedImage = document.getElementById('uploadedImage');
        const jsonOutput = document.getElementById('jsonOutput');

        // Función para mostrar la vista previa de la imagen
        imageInput.addEventListener('change', function () {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    uploadedImage.src = e.target.result;
                    uploadedImage.style.display = 'block'; // Mostrar la imagen
                }
                reader.readAsDataURL(file); // Lee el archivo como una URL de datos para la vista previa
            } else {
                uploadedImage.src = '#';
                uploadedImage.style.display = 'none'; // Ocultar si no hay archivo
            }
        });

        // Manejar el envío del formulario
        imageForm.addEventListener('submit', async function (e) {
            e.preventDefault(); // Prevenir el envío tradicional del formulario

            const file = imageInput.files[0];
            if (!file) {
                alert("Por favor, selecciona una imagen para analizar.");
                return;
            }

            jsonOutput.value = "Analizando imagen, por favor espera..."; // Mensaje de carga

            const formData = new FormData();
            formData.append("image", file); // El nombre "image" debe coincidir con cómo el controlador espera el archivo

            try {
                // La URL debe apuntar al ImageAnalysisController de API
                // Por ejemplo: /api/ImageAnalysis/analyze
                const response = await fetch('/api/ImageAnalysis/analyze', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
                }

                const result = await response.json();
                jsonOutput.value = JSON.stringify(result, null, 4);
            } catch (error) {
                console.error("Error al analizar la imagen:", error);
                jsonOutput.value = 'Error al analizar la imagen: ' + error.message;
            }
        });
    </script>
</body>
</html>